#compdef cargo

autoload -U is-at-least

_cargo() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_cargo_commands" \
"*::: :->cargo" \
&& ret=0
    case $state in
    (cargo)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-command-$line[1]:"
        case $line[1] in
            (axiom)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_cargo__axiom_commands" \
"*::: :->axiom" \
&& ret=0

    case $state in
    (axiom)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-command-$line[1]:"
        case $line[1] in
            (init)
_arguments "${_arguments_options[@]}" : \
'--name=[Set the package name, default is the directory name]:NAME:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
'::path -- Path to create the package in:_default' \
&& ret=0
;;
(register)
_arguments "${_arguments_options[@]}" : \
'--api-url=[The API URL to use (defaults to https\://api.axiom.xyz/v1)]:URL:_default' \
'--api-key=[Axiom API key]:KEY:_default' \
'--staging[Whether to use staging API]' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" : \
'(--config)--config-id=[The configuration ID to use for the build]:ID:_default' \
'--config=[Path to an OpenVM TOML configuration file]:PATH:_default' \
'--bin=[The binary to build, if there are multiple binaries in the project]:BIN:_default' \
'--keep-tarball=[Keep the tar archive after uploading]:KEEP_TARBALL:(true false)' \
'--exclude-files=[Comma-separated list of file patterns to exclude (e.g. "*.log,temp/*")]:PATTERNS:_default' \
'--include-dirs=[Comma-separated list of directories to include even if not tracked by git]:DIRS:_default' \
'--project-id=[The project ID to associate with the build]:PROJECT_ID:_default' \
'--wait[Wait for the build to complete and download artifacts]' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_cargo__axiom__build_commands" \
"*::: :->build" \
&& ret=0

    case $state in
    (build)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-build-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
'--program-id=[The program ID to check status for]:ID:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(download)
_arguments "${_arguments_options[@]}" : \
'--program-id=[The program ID to download artifacts for]:ID:_default' \
'--program-type=[The type of artifact to download (exe or elf)]:TYPE:(exe elf source app_exe_commit)' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
'--program-id=[The program ID to download logs for]:ID:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__build__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-build-help-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(download)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(prove)
_arguments "${_arguments_options[@]}" : \
'--program-id=[The ID of the program to generate a proof for]:PROGRAM_ID:_default' \
'--input=[Input to OpenVM program]:INPUT:_default' \
'--type=[The type of proof to generate (stark or evm)]:PROOF_TYPE:(stark evm)' \
'--wait[Wait for the proof to complete and download artifacts]' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_cargo__axiom__prove_commands" \
"*::: :->prove" \
&& ret=0

    case $state in
    (prove)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-prove-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
'--proof-id=[The proof ID to check status for]:ID:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
'--proof-id=[The proof ID to download logs for]:ID:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(download)
_arguments "${_arguments_options[@]}" : \
'--proof-id=[The proof ID to download artifacts for]:ID:_default' \
'--type=[The type of proof artifact to download (stark, or evm)]:PROOF_TYPE:(stark evm)' \
'--output=[Output file path (defaults to proof_id-type.json)]:FILE:_files' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'--program-id=[The ID of the program to list proofs for]:PROGRAM_ID:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__prove__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-prove-help-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(download)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(run)
_arguments "${_arguments_options[@]}" : \
'--program-id=[The ID of the program to execute]:PROGRAM_ID:_default' \
'--input=[Input to OpenVM program]:INPUT:_default' \
'--wait[Wait for the execution to complete]' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_cargo__axiom__run_commands" \
"*::: :->run" \
&& ret=0

    case $state in
    (run)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-run-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
'--execution-id=[The execution ID to check status for]:ID:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__run__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-run-help-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(config)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_cargo__axiom__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-config-command-$line[1]:"
        case $line[1] in
            (download)
_arguments "${_arguments_options[@]}" : \
'--config-id=[The config ID to download for]:ID:_default' \
'--output=[Optional output file path (defaults to artifact name in current directory)]:FILE:_files' \
'--evm-verifier[Download EVM verifier instead of config]' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'--config-id=[The config ID to check status for]:ID:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__config__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-config-help-command-$line[1]:"
        case $line[1] in
            (download)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(download-keys)
_arguments "${_arguments_options[@]}" : \
'--config-id=[The config ID to download public key for]:ID:_default' \
'--type=[The type of key to download]:KEY_TYPE:(app_pk agg_pk halo2_pk app_vk agg_vk)' \
'--output=[Optional output file path (defaults to key_type name in current directory)]:FILE:_files' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(verify)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_cargo__axiom__verify_commands" \
"*::: :->verify" \
&& ret=0

    case $state in
    (verify)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-verify-command-$line[1]:"
        case $line[1] in
            (evm)
_arguments "${_arguments_options[@]}" : \
'--config-id=[The config ID to use for verification]:ID:_default' \
'--proof=[Path to the proof file]:FILE:_files' \
'--wait[Wait for the verification to complete]' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(stark)
_arguments "${_arguments_options[@]}" : \
'--program-id=[The program ID to use for verification]:ID:_default' \
'--proof=[Path to the proof file]:FILE:_files' \
'--wait[Wait for the verification to complete]' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'--verify-id=[The verification ID to check status for]:ID:_default' \
'--proof-type=[The proof type (evm or stark)]:TYPE:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__verify__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-verify-help-command-$line[1]:"
        case $line[1] in
            (evm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stark)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(projects)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_cargo__axiom__projects_commands" \
"*::: :->projects" \
&& ret=0

    case $state in
    (projects)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-projects-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'--page=[Page number (default\: 1)]:PAGE:_default' \
'--page-size=[Page size (default\: 20)]:PAGE_SIZE:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- Name of the project to create:_default' \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
'--project-id=[Project ID to show details for]:PROJECT_ID:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(programs)
_arguments "${_arguments_options[@]}" : \
'--project-id=[Project ID to list programs for]:PROJECT_ID:_default' \
'--page=[Page number (default\: 1)]:PAGE:_default' \
'--page-size=[Page size (default\: 20)]:PAGE_SIZE:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(move)
_arguments "${_arguments_options[@]}" : \
'--program-id=[Program ID to move]:PROGRAM_ID:_default' \
'--to-project=[Target project ID to move program to]:TO_PROJECT:_default' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__projects__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-projects-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(programs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(move)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(version)
_arguments "${_arguments_options[@]}" : \
'--verbose[]' \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
'--debug[Enable debug mode to show full error traces]' \
'-h[Print help]' \
'--help[Print help]' \
':shell -- The shell to generate completions for:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-help-command-$line[1]:"
        case $line[1] in
            (init)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(register)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__help__build_commands" \
"*::: :->build" \
&& ret=0

    case $state in
    (build)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-help-build-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(download)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(prove)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__help__prove_commands" \
"*::: :->prove" \
&& ret=0

    case $state in
    (prove)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-help-prove-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(download)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(run)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__help__run_commands" \
"*::: :->run" \
&& ret=0

    case $state in
    (run)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-help-run-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(config)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__help__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-help-config-command-$line[1]:"
        case $line[1] in
            (download)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(download-keys)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(verify)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__help__verify_commands" \
"*::: :->verify" \
&& ret=0

    case $state in
    (verify)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-help-verify-command-$line[1]:"
        case $line[1] in
            (evm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stark)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(projects)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__axiom__help__projects_commands" \
"*::: :->projects" \
&& ret=0

    case $state in
    (projects)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-axiom-help-projects-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(programs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(move)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(version)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-help-command-$line[1]:"
        case $line[1] in
            (axiom)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__help__axiom_commands" \
"*::: :->axiom" \
&& ret=0

    case $state in
    (axiom)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-help-axiom-command-$line[1]:"
        case $line[1] in
            (init)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(register)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__help__axiom__build_commands" \
"*::: :->build" \
&& ret=0

    case $state in
    (build)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-help-axiom-build-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(download)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(prove)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__help__axiom__prove_commands" \
"*::: :->prove" \
&& ret=0

    case $state in
    (prove)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-help-axiom-prove-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(download)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(run)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__help__axiom__run_commands" \
"*::: :->run" \
&& ret=0

    case $state in
    (run)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-help-axiom-run-command-$line[1]:"
        case $line[1] in
            (status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(config)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__help__axiom__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-help-axiom-config-command-$line[1]:"
        case $line[1] in
            (download)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(download-keys)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(verify)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__help__axiom__verify_commands" \
"*::: :->verify" \
&& ret=0

    case $state in
    (verify)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-help-axiom-verify-command-$line[1]:"
        case $line[1] in
            (evm)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(stark)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(projects)
_arguments "${_arguments_options[@]}" : \
":: :_cargo__help__axiom__projects_commands" \
"*::: :->projects" \
&& ret=0

    case $state in
    (projects)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cargo-help-axiom-projects-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(programs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(move)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(version)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_cargo_commands] )) ||
_cargo_commands() {
    local commands; commands=(
'axiom:A Cargo subcommand for the Axiom Proving API' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo commands' commands "$@"
}
(( $+functions[_cargo__axiom_commands] )) ||
_cargo__axiom_commands() {
    local commands; commands=(
'init:Initialize a new OpenVM project' \
'register:Register Axiom API credentials' \
'build:Build the project on Axiom Proving Service' \
'prove:Generate a proof using the Axiom Proving Service' \
'run:Execute a program using the Axiom Execution Service' \
'config:Manage VM configuration artifacts' \
'download-keys:Download proving keys' \
'verify:Verify a proof using the Axiom Verifying Service' \
'projects:Manage projects' \
'version:Display version information' \
'completions:Generate shell completions' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom commands' commands "$@"
}
(( $+functions[_cargo__axiom__build_commands] )) ||
_cargo__axiom__build_commands() {
    local commands; commands=(
'status:Check the status of a build' \
'list:List all build programs' \
'download:Download build artifacts' \
'logs:Download build logs for a program' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom build commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__download_commands] )) ||
_cargo__axiom__build__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom build download commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__help_commands] )) ||
_cargo__axiom__build__help_commands() {
    local commands; commands=(
'status:Check the status of a build' \
'list:List all build programs' \
'download:Download build artifacts' \
'logs:Download build logs for a program' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom build help commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__help__download_commands] )) ||
_cargo__axiom__build__help__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom build help download commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__help__help_commands] )) ||
_cargo__axiom__build__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom build help help commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__help__list_commands] )) ||
_cargo__axiom__build__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom build help list commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__help__logs_commands] )) ||
_cargo__axiom__build__help__logs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom build help logs commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__help__status_commands] )) ||
_cargo__axiom__build__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom build help status commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__list_commands] )) ||
_cargo__axiom__build__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom build list commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__logs_commands] )) ||
_cargo__axiom__build__logs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom build logs commands' commands "$@"
}
(( $+functions[_cargo__axiom__build__status_commands] )) ||
_cargo__axiom__build__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom build status commands' commands "$@"
}
(( $+functions[_cargo__axiom__completions_commands] )) ||
_cargo__axiom__completions_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom completions commands' commands "$@"
}
(( $+functions[_cargo__axiom__config_commands] )) ||
_cargo__axiom__config_commands() {
    local commands; commands=(
'download:Download config artifacts' \
'status:Get config information' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom config commands' commands "$@"
}
(( $+functions[_cargo__axiom__config__download_commands] )) ||
_cargo__axiom__config__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom config download commands' commands "$@"
}
(( $+functions[_cargo__axiom__config__help_commands] )) ||
_cargo__axiom__config__help_commands() {
    local commands; commands=(
'download:Download config artifacts' \
'status:Get config information' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom config help commands' commands "$@"
}
(( $+functions[_cargo__axiom__config__help__download_commands] )) ||
_cargo__axiom__config__help__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom config help download commands' commands "$@"
}
(( $+functions[_cargo__axiom__config__help__help_commands] )) ||
_cargo__axiom__config__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom config help help commands' commands "$@"
}
(( $+functions[_cargo__axiom__config__help__status_commands] )) ||
_cargo__axiom__config__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom config help status commands' commands "$@"
}
(( $+functions[_cargo__axiom__config__status_commands] )) ||
_cargo__axiom__config__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom config status commands' commands "$@"
}
(( $+functions[_cargo__axiom__download-keys_commands] )) ||
_cargo__axiom__download-keys_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom download-keys commands' commands "$@"
}
(( $+functions[_cargo__axiom__help_commands] )) ||
_cargo__axiom__help_commands() {
    local commands; commands=(
'init:Initialize a new OpenVM project' \
'register:Register Axiom API credentials' \
'build:Build the project on Axiom Proving Service' \
'prove:Generate a proof using the Axiom Proving Service' \
'run:Execute a program using the Axiom Execution Service' \
'config:Manage VM configuration artifacts' \
'download-keys:Download proving keys' \
'verify:Verify a proof using the Axiom Verifying Service' \
'projects:Manage projects' \
'version:Display version information' \
'completions:Generate shell completions' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom help commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__build_commands] )) ||
_cargo__axiom__help__build_commands() {
    local commands; commands=(
'status:Check the status of a build' \
'list:List all build programs' \
'download:Download build artifacts' \
'logs:Download build logs for a program' \
    )
    _describe -t commands 'cargo axiom help build commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__build__download_commands] )) ||
_cargo__axiom__help__build__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help build download commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__build__list_commands] )) ||
_cargo__axiom__help__build__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help build list commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__build__logs_commands] )) ||
_cargo__axiom__help__build__logs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help build logs commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__build__status_commands] )) ||
_cargo__axiom__help__build__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help build status commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__completions_commands] )) ||
_cargo__axiom__help__completions_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help completions commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__config_commands] )) ||
_cargo__axiom__help__config_commands() {
    local commands; commands=(
'download:Download config artifacts' \
'status:Get config information' \
    )
    _describe -t commands 'cargo axiom help config commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__config__download_commands] )) ||
_cargo__axiom__help__config__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help config download commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__config__status_commands] )) ||
_cargo__axiom__help__config__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help config status commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__download-keys_commands] )) ||
_cargo__axiom__help__download-keys_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help download-keys commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__help_commands] )) ||
_cargo__axiom__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help help commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__init_commands] )) ||
_cargo__axiom__help__init_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help init commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__projects_commands] )) ||
_cargo__axiom__help__projects_commands() {
    local commands; commands=(
'list:List all projects' \
'create:Create a new project' \
'show:Show details for a specific project' \
'programs:List programs in a project' \
'move:Move a program to a different project' \
    )
    _describe -t commands 'cargo axiom help projects commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__projects__create_commands] )) ||
_cargo__axiom__help__projects__create_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help projects create commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__projects__list_commands] )) ||
_cargo__axiom__help__projects__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help projects list commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__projects__move_commands] )) ||
_cargo__axiom__help__projects__move_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help projects move commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__projects__programs_commands] )) ||
_cargo__axiom__help__projects__programs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help projects programs commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__projects__show_commands] )) ||
_cargo__axiom__help__projects__show_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help projects show commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__prove_commands] )) ||
_cargo__axiom__help__prove_commands() {
    local commands; commands=(
'status:Check the status of a proof' \
'logs:Download logs for a proof' \
'download:Download proof artifacts' \
'list:List all proofs for a program' \
    )
    _describe -t commands 'cargo axiom help prove commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__prove__download_commands] )) ||
_cargo__axiom__help__prove__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help prove download commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__prove__list_commands] )) ||
_cargo__axiom__help__prove__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help prove list commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__prove__logs_commands] )) ||
_cargo__axiom__help__prove__logs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help prove logs commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__prove__status_commands] )) ||
_cargo__axiom__help__prove__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help prove status commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__register_commands] )) ||
_cargo__axiom__help__register_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help register commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__run_commands] )) ||
_cargo__axiom__help__run_commands() {
    local commands; commands=(
'status:Check the status of an execution' \
    )
    _describe -t commands 'cargo axiom help run commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__run__status_commands] )) ||
_cargo__axiom__help__run__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help run status commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__verify_commands] )) ||
_cargo__axiom__help__verify_commands() {
    local commands; commands=(
'evm:Verify an EVM proof' \
'stark:Verify a STARK proof' \
'status:Check the status of a verification' \
    )
    _describe -t commands 'cargo axiom help verify commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__verify__evm_commands] )) ||
_cargo__axiom__help__verify__evm_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help verify evm commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__verify__stark_commands] )) ||
_cargo__axiom__help__verify__stark_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help verify stark commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__verify__status_commands] )) ||
_cargo__axiom__help__verify__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help verify status commands' commands "$@"
}
(( $+functions[_cargo__axiom__help__version_commands] )) ||
_cargo__axiom__help__version_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom help version commands' commands "$@"
}
(( $+functions[_cargo__axiom__init_commands] )) ||
_cargo__axiom__init_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom init commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects_commands] )) ||
_cargo__axiom__projects_commands() {
    local commands; commands=(
'list:List all projects' \
'create:Create a new project' \
'show:Show details for a specific project' \
'programs:List programs in a project' \
'move:Move a program to a different project' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom projects commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__create_commands] )) ||
_cargo__axiom__projects__create_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects create commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__help_commands] )) ||
_cargo__axiom__projects__help_commands() {
    local commands; commands=(
'list:List all projects' \
'create:Create a new project' \
'show:Show details for a specific project' \
'programs:List programs in a project' \
'move:Move a program to a different project' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom projects help commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__help__create_commands] )) ||
_cargo__axiom__projects__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects help create commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__help__help_commands] )) ||
_cargo__axiom__projects__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects help help commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__help__list_commands] )) ||
_cargo__axiom__projects__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects help list commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__help__move_commands] )) ||
_cargo__axiom__projects__help__move_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects help move commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__help__programs_commands] )) ||
_cargo__axiom__projects__help__programs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects help programs commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__help__show_commands] )) ||
_cargo__axiom__projects__help__show_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects help show commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__list_commands] )) ||
_cargo__axiom__projects__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects list commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__move_commands] )) ||
_cargo__axiom__projects__move_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects move commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__programs_commands] )) ||
_cargo__axiom__projects__programs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects programs commands' commands "$@"
}
(( $+functions[_cargo__axiom__projects__show_commands] )) ||
_cargo__axiom__projects__show_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom projects show commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove_commands] )) ||
_cargo__axiom__prove_commands() {
    local commands; commands=(
'status:Check the status of a proof' \
'logs:Download logs for a proof' \
'download:Download proof artifacts' \
'list:List all proofs for a program' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom prove commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__download_commands] )) ||
_cargo__axiom__prove__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom prove download commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__help_commands] )) ||
_cargo__axiom__prove__help_commands() {
    local commands; commands=(
'status:Check the status of a proof' \
'logs:Download logs for a proof' \
'download:Download proof artifacts' \
'list:List all proofs for a program' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom prove help commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__help__download_commands] )) ||
_cargo__axiom__prove__help__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom prove help download commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__help__help_commands] )) ||
_cargo__axiom__prove__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom prove help help commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__help__list_commands] )) ||
_cargo__axiom__prove__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom prove help list commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__help__logs_commands] )) ||
_cargo__axiom__prove__help__logs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom prove help logs commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__help__status_commands] )) ||
_cargo__axiom__prove__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom prove help status commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__list_commands] )) ||
_cargo__axiom__prove__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom prove list commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__logs_commands] )) ||
_cargo__axiom__prove__logs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom prove logs commands' commands "$@"
}
(( $+functions[_cargo__axiom__prove__status_commands] )) ||
_cargo__axiom__prove__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom prove status commands' commands "$@"
}
(( $+functions[_cargo__axiom__register_commands] )) ||
_cargo__axiom__register_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom register commands' commands "$@"
}
(( $+functions[_cargo__axiom__run_commands] )) ||
_cargo__axiom__run_commands() {
    local commands; commands=(
'status:Check the status of an execution' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom run commands' commands "$@"
}
(( $+functions[_cargo__axiom__run__help_commands] )) ||
_cargo__axiom__run__help_commands() {
    local commands; commands=(
'status:Check the status of an execution' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom run help commands' commands "$@"
}
(( $+functions[_cargo__axiom__run__help__help_commands] )) ||
_cargo__axiom__run__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom run help help commands' commands "$@"
}
(( $+functions[_cargo__axiom__run__help__status_commands] )) ||
_cargo__axiom__run__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom run help status commands' commands "$@"
}
(( $+functions[_cargo__axiom__run__status_commands] )) ||
_cargo__axiom__run__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom run status commands' commands "$@"
}
(( $+functions[_cargo__axiom__verify_commands] )) ||
_cargo__axiom__verify_commands() {
    local commands; commands=(
'evm:Verify an EVM proof' \
'stark:Verify a STARK proof' \
'status:Check the status of a verification' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom verify commands' commands "$@"
}
(( $+functions[_cargo__axiom__verify__evm_commands] )) ||
_cargo__axiom__verify__evm_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom verify evm commands' commands "$@"
}
(( $+functions[_cargo__axiom__verify__help_commands] )) ||
_cargo__axiom__verify__help_commands() {
    local commands; commands=(
'evm:Verify an EVM proof' \
'stark:Verify a STARK proof' \
'status:Check the status of a verification' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo axiom verify help commands' commands "$@"
}
(( $+functions[_cargo__axiom__verify__help__evm_commands] )) ||
_cargo__axiom__verify__help__evm_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom verify help evm commands' commands "$@"
}
(( $+functions[_cargo__axiom__verify__help__help_commands] )) ||
_cargo__axiom__verify__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom verify help help commands' commands "$@"
}
(( $+functions[_cargo__axiom__verify__help__stark_commands] )) ||
_cargo__axiom__verify__help__stark_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom verify help stark commands' commands "$@"
}
(( $+functions[_cargo__axiom__verify__help__status_commands] )) ||
_cargo__axiom__verify__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom verify help status commands' commands "$@"
}
(( $+functions[_cargo__axiom__verify__stark_commands] )) ||
_cargo__axiom__verify__stark_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom verify stark commands' commands "$@"
}
(( $+functions[_cargo__axiom__verify__status_commands] )) ||
_cargo__axiom__verify__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom verify status commands' commands "$@"
}
(( $+functions[_cargo__axiom__version_commands] )) ||
_cargo__axiom__version_commands() {
    local commands; commands=()
    _describe -t commands 'cargo axiom version commands' commands "$@"
}
(( $+functions[_cargo__help_commands] )) ||
_cargo__help_commands() {
    local commands; commands=(
'axiom:A Cargo subcommand for the Axiom Proving API' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cargo help commands' commands "$@"
}
(( $+functions[_cargo__help__axiom_commands] )) ||
_cargo__help__axiom_commands() {
    local commands; commands=(
'init:Initialize a new OpenVM project' \
'register:Register Axiom API credentials' \
'build:Build the project on Axiom Proving Service' \
'prove:Generate a proof using the Axiom Proving Service' \
'run:Execute a program using the Axiom Execution Service' \
'config:Manage VM configuration artifacts' \
'download-keys:Download proving keys' \
'verify:Verify a proof using the Axiom Verifying Service' \
'projects:Manage projects' \
'version:Display version information' \
'completions:Generate shell completions' \
    )
    _describe -t commands 'cargo help axiom commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__build_commands] )) ||
_cargo__help__axiom__build_commands() {
    local commands; commands=(
'status:Check the status of a build' \
'list:List all build programs' \
'download:Download build artifacts' \
'logs:Download build logs for a program' \
    )
    _describe -t commands 'cargo help axiom build commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__build__download_commands] )) ||
_cargo__help__axiom__build__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom build download commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__build__list_commands] )) ||
_cargo__help__axiom__build__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom build list commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__build__logs_commands] )) ||
_cargo__help__axiom__build__logs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom build logs commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__build__status_commands] )) ||
_cargo__help__axiom__build__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom build status commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__completions_commands] )) ||
_cargo__help__axiom__completions_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom completions commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__config_commands] )) ||
_cargo__help__axiom__config_commands() {
    local commands; commands=(
'download:Download config artifacts' \
'status:Get config information' \
    )
    _describe -t commands 'cargo help axiom config commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__config__download_commands] )) ||
_cargo__help__axiom__config__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom config download commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__config__status_commands] )) ||
_cargo__help__axiom__config__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom config status commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__download-keys_commands] )) ||
_cargo__help__axiom__download-keys_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom download-keys commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__init_commands] )) ||
_cargo__help__axiom__init_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom init commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__projects_commands] )) ||
_cargo__help__axiom__projects_commands() {
    local commands; commands=(
'list:List all projects' \
'create:Create a new project' \
'show:Show details for a specific project' \
'programs:List programs in a project' \
'move:Move a program to a different project' \
    )
    _describe -t commands 'cargo help axiom projects commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__projects__create_commands] )) ||
_cargo__help__axiom__projects__create_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom projects create commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__projects__list_commands] )) ||
_cargo__help__axiom__projects__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom projects list commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__projects__move_commands] )) ||
_cargo__help__axiom__projects__move_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom projects move commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__projects__programs_commands] )) ||
_cargo__help__axiom__projects__programs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom projects programs commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__projects__show_commands] )) ||
_cargo__help__axiom__projects__show_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom projects show commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__prove_commands] )) ||
_cargo__help__axiom__prove_commands() {
    local commands; commands=(
'status:Check the status of a proof' \
'logs:Download logs for a proof' \
'download:Download proof artifacts' \
'list:List all proofs for a program' \
    )
    _describe -t commands 'cargo help axiom prove commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__prove__download_commands] )) ||
_cargo__help__axiom__prove__download_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom prove download commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__prove__list_commands] )) ||
_cargo__help__axiom__prove__list_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom prove list commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__prove__logs_commands] )) ||
_cargo__help__axiom__prove__logs_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom prove logs commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__prove__status_commands] )) ||
_cargo__help__axiom__prove__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom prove status commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__register_commands] )) ||
_cargo__help__axiom__register_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom register commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__run_commands] )) ||
_cargo__help__axiom__run_commands() {
    local commands; commands=(
'status:Check the status of an execution' \
    )
    _describe -t commands 'cargo help axiom run commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__run__status_commands] )) ||
_cargo__help__axiom__run__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom run status commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__verify_commands] )) ||
_cargo__help__axiom__verify_commands() {
    local commands; commands=(
'evm:Verify an EVM proof' \
'stark:Verify a STARK proof' \
'status:Check the status of a verification' \
    )
    _describe -t commands 'cargo help axiom verify commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__verify__evm_commands] )) ||
_cargo__help__axiom__verify__evm_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom verify evm commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__verify__stark_commands] )) ||
_cargo__help__axiom__verify__stark_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom verify stark commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__verify__status_commands] )) ||
_cargo__help__axiom__verify__status_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom verify status commands' commands "$@"
}
(( $+functions[_cargo__help__axiom__version_commands] )) ||
_cargo__help__axiom__version_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help axiom version commands' commands "$@"
}
(( $+functions[_cargo__help__help_commands] )) ||
_cargo__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'cargo help help commands' commands "$@"
}

if [ "$funcstack[1]" = "_cargo" ]; then
    _cargo "$@"
else
    compdef _cargo cargo
fi
